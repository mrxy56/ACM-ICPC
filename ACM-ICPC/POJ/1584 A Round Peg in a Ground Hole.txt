#include<cstdio>
#include<cmath>
#include<vector>
#include<algorithm>
using namespace std;
#define FOR(i,s,t) for(int i=(s);i<(t);i++)
const double eps=1e-8;
const int maxn=100;
int n;
int cmp(double x){
	if(fabs(x)<eps) return 0;
	if(x>0) return 1;
	return -1;
}
int gcd(int a,int b){
	if(b==0) return a;
	else return gcd(b,a%b);
}
const double pi=acos(-1.0);
inline double sqr(double x){
	return x*x;
}
struct point{
	double x,y;
	point(){}
	point(double a,double b):x(a),y(b){}
	void input(){
		scanf("%lf%lf",&x,&y);
	}
	friend point operator + (const point &a,const point &b){
		return point(a.x+b.x,a.y+b.y);
	}
	friend point operator - (const point &a,const point &b){
		return point(a.x-b.x,a.y-b.y);
	}
	friend bool operator == (const point &a,const point &b){
		return cmp(a.x-b.x)==0 && cmp(a.y-b.y)==0;
	}
	friend point operator * (const point &a,const double &b){
		return point(a.x*b,a.y*b);
	}
	friend point operator / (const point &a,const double &b){
		return point(a.x/b,a.y/b);
	}
	double norm(){
		return sqrt(sqr(x)+sqr(y));
	}
};
double det(const point &a,const point &b){
	return a.x*b.y-a.y*b.x;
}
double dot(const point &a,const point &b){
	return a.x*b.x+a.y*b.y;
}
double dist(const point &a,const point &b){
	return (a-b).norm();
}
double dis_point_segment(const point p,const point s,const point t){
    if(cmp(dot(p-s,t-s))<0) return (p-s).norm();
	if(cmp(dot(p-t,s-t))<0) return (p-t).norm();
	return fabs(det(s-p,t-p)/dist(s,t));
}
bool PointOnSegment(point p,point s,point t){
	return cmp(det(p-s,t-s))==0 && cmp(dot(p-s,p-t))<=0;
}
struct polygon{
	int n;
	point a[maxn];
	polygon(){}
	double perimeter(){
		double sum=0;
		a[n]=a[0];
		for(int i=0;i<n;i++) sum+=(a[i+1]-a[i]).norm();
		return sum;
	}
	double area(){
		double sum=0;
		a[n]=a[0];
		for(int i=0;i<n;i++) sum+=det(a[i+1],a[i]);
		return sum/2;
	}
	int Point_In(point t){
		int num=0,i,d1,d2,k;
		a[n]=a[0];
		for(i=0;i<n;i++){
			if(PointOnSegment(t,a[i],a[i+1])) return 2;
			k=cmp(det(a[i+1]-a[i],t-a[i]));
			d1=cmp(a[i].y-t.y);
			d2=cmp(a[i+1].y-t.y);
			if(k>0 && d1<=0 && d2>0) num++;
			if(k<0 && d2<=0 && d1>0) num--;
		}
		return num!=0;
	}
	point MassCenter(){
		point ans=point(0,0);
		if(cmp(area())==0) return ans;
		a[n]=a[0];
		for(int i=0;i<n;i++) ans=ans+(a[i]+a[i+1])*det(a[i+1],a[i]);
		return ans/area()/6;
	}
	int Border_Int_Point_Num(){
		int num=0;
		a[n]=a[0];
		for(int i=0;i<n;i++)
			num+=gcd(abs(int(a[i+1].x-a[i].x)),abs(int(a[i+1].y-a[i].y)));
		return num;
	}
	int Inside_Int_Point_Num(){
		return int(area())+1-Border_Int_Point_Num()/2;
	}
	bool is_convex(int n){
		int dir=0,temp;
		FOR(i,1,n+1){
			temp=cmp(det(a[i]-a[i-1],a[i+1]-a[i]));
			if(dir==0) dir=temp;
			else if(dir*temp<0) return false;
		}
		return true;
    }
	bool Circle_In(double r,double x,double y){
		FOR(i,0,n){
			double d=dis_point_segment(point(x,y),a[i],a[i+1]);
			if(cmp(r-d)>0) return false;
		}
		return true;
	}
};
int main(){
	double r,x,y;
	while(scanf("%d",&n)==1 && n>=3){
		polygon poly;
		scanf("%lf%lf%lf",&r,&x,&y);
		poly.n=n;
		FOR(i,0,n)
			scanf("%lf%lf",&poly.a[i].x,&poly.a[i].y);
        poly.a[n].x=poly.a[0].x;poly.a[n].y=poly.a[0].y;
		poly.a[n+1].x=poly.a[1].x;poly.a[n+1].y=poly.a[1].y;
		bool flag1=poly.is_convex(n);
		bool flag2=poly.Point_In(point(x,y));
		bool flag3=poly.Circle_In(r,x,y);
		if(!flag1){
			printf("HOLE IS ILL-FORMED\n"); 
		}else{
			if(flag2 && flag3)
			    printf("PEG WILL FIT\n");
			else printf("PEG WILL NOT FIT\n");
		}
	}
    return 0;
}
  