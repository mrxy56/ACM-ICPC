#include<cstdio>
#include<set>
#include<queue>
#define rep(i,n) for(int i=0;i<n;i++)
using namespace std;
const int maxn=500000;
const int inf=~0U>>1;
int n;
int L[maxn][2];
int N[maxn];
inline int abs(int x){return x>0?x:-x;}
struct qset{ 
    multiset<int> S;
	typedef set<int>::iterator it;
	int Min;
	qset(){Min=inf;}
	void ins(int x){ 
	    it j=S.insert(x);
		if(j!=S.begin())
			Min=min(Min,x-*(--j)),++j;
		++j;
		if(j!=S.end())
			Min=min(Min,*(j)-x);
	}
}All;
struct state{ 
    bool in;
	int i,x,val;
	state(bool _in,int _val,int _i=0,int _x=0):in(_in),i(_i),x(_x),val(_val){ }
	bool legal()const{return in||x==N[i];}
	bool operator<(const state&o) const{return val>o.val;}
};
priority_queue<state> Q;
void ins(int i,int x){ 
    All.ins(x);
	Q.push(state(true,abs(x-L[i][1])));
	L[i][1]=x;N[i]++;
	if(i!=n-1) Q.push(state(false,abs(L[i+1][0]-x),i,N[i]));
}
int get(){ 
    while(!Q.top().legal()) Q.pop();
	return Q.top().val;
}
int main(){ 
    char cmd[100];
	int n,m,x,i;
	scanf("%d%d",&n,&m);
	rep(i,n) scanf("%d",&L[i][0]),L[i][1]=L[i][0],All.ins(L[i][0]),N[i]=1;
	rep(i,n-1){ 
        Q.push(state(false,abs(L[i+1][0]-L[i][0]),i,1));	 
  	}
	while(m--){ 
	    getchar();
		scanf("%s",cmd);
		if(cmd[0]=='I')
			scanf("%d%d",&i,&x),ins(i-1,x);
		else if(cmd[4]=='G') printf("%d\n",get());
		else printf("%d\n",All.Min);
	}
	return 0;
}  